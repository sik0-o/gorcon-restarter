// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.0
// source: internal/proto/grpcrcon/grpcrcon.proto

package grpcrcon

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GRPCRCONServiceClient is the client API for GRPCRCONService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GRPCRCONServiceClient interface {
	// Servers returns list of available servers
	Servers(ctx context.Context, in *ServersRequest, opts ...grpc.CallOption) (*ServersResponse, error)
	// Restart perform server restart event
	Restart(ctx context.Context, in *RestartRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// Command perform command on server
	Command(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// Announce all players with message
	Announce(ctx context.Context, in *AnnounceRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// Kick player or all players from server
	Kick(ctx context.Context, in *KickRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// Lock server
	Lock(ctx context.Context, in *LockRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// Say message to server player
	Say(ctx context.Context, in *LockRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// Shutdown server
	Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// Unlock server
	Unlock(ctx context.Context, in *UnlockRequest, opts ...grpc.CallOption) (*StatusResponse, error)
}

type gRPCRCONServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGRPCRCONServiceClient(cc grpc.ClientConnInterface) GRPCRCONServiceClient {
	return &gRPCRCONServiceClient{cc}
}

func (c *gRPCRCONServiceClient) Servers(ctx context.Context, in *ServersRequest, opts ...grpc.CallOption) (*ServersResponse, error) {
	out := new(ServersResponse)
	err := c.cc.Invoke(ctx, "/grpcrcon.GRPCRCONService/Servers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCRCONServiceClient) Restart(ctx context.Context, in *RestartRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/grpcrcon.GRPCRCONService/Restart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCRCONServiceClient) Command(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/grpcrcon.GRPCRCONService/Command", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCRCONServiceClient) Announce(ctx context.Context, in *AnnounceRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/grpcrcon.GRPCRCONService/Announce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCRCONServiceClient) Kick(ctx context.Context, in *KickRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/grpcrcon.GRPCRCONService/Kick", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCRCONServiceClient) Lock(ctx context.Context, in *LockRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/grpcrcon.GRPCRCONService/Lock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCRCONServiceClient) Say(ctx context.Context, in *LockRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/grpcrcon.GRPCRCONService/Say", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCRCONServiceClient) Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/grpcrcon.GRPCRCONService/Shutdown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCRCONServiceClient) Unlock(ctx context.Context, in *UnlockRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/grpcrcon.GRPCRCONService/Unlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GRPCRCONServiceServer is the server API for GRPCRCONService service.
// All implementations must embed UnimplementedGRPCRCONServiceServer
// for forward compatibility
type GRPCRCONServiceServer interface {
	// Servers returns list of available servers
	Servers(context.Context, *ServersRequest) (*ServersResponse, error)
	// Restart perform server restart event
	Restart(context.Context, *RestartRequest) (*StatusResponse, error)
	// Command perform command on server
	Command(context.Context, *CommandRequest) (*StatusResponse, error)
	// Announce all players with message
	Announce(context.Context, *AnnounceRequest) (*StatusResponse, error)
	// Kick player or all players from server
	Kick(context.Context, *KickRequest) (*StatusResponse, error)
	// Lock server
	Lock(context.Context, *LockRequest) (*StatusResponse, error)
	// Say message to server player
	Say(context.Context, *LockRequest) (*StatusResponse, error)
	// Shutdown server
	Shutdown(context.Context, *ShutdownRequest) (*StatusResponse, error)
	// Unlock server
	Unlock(context.Context, *UnlockRequest) (*StatusResponse, error)
	mustEmbedUnimplementedGRPCRCONServiceServer()
}

// UnimplementedGRPCRCONServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGRPCRCONServiceServer struct {
}

func (UnimplementedGRPCRCONServiceServer) Servers(context.Context, *ServersRequest) (*ServersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Servers not implemented")
}
func (UnimplementedGRPCRCONServiceServer) Restart(context.Context, *RestartRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restart not implemented")
}
func (UnimplementedGRPCRCONServiceServer) Command(context.Context, *CommandRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Command not implemented")
}
func (UnimplementedGRPCRCONServiceServer) Announce(context.Context, *AnnounceRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Announce not implemented")
}
func (UnimplementedGRPCRCONServiceServer) Kick(context.Context, *KickRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Kick not implemented")
}
func (UnimplementedGRPCRCONServiceServer) Lock(context.Context, *LockRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lock not implemented")
}
func (UnimplementedGRPCRCONServiceServer) Say(context.Context, *LockRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Say not implemented")
}
func (UnimplementedGRPCRCONServiceServer) Shutdown(context.Context, *ShutdownRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shutdown not implemented")
}
func (UnimplementedGRPCRCONServiceServer) Unlock(context.Context, *UnlockRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unlock not implemented")
}
func (UnimplementedGRPCRCONServiceServer) mustEmbedUnimplementedGRPCRCONServiceServer() {}

// UnsafeGRPCRCONServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GRPCRCONServiceServer will
// result in compilation errors.
type UnsafeGRPCRCONServiceServer interface {
	mustEmbedUnimplementedGRPCRCONServiceServer()
}

func RegisterGRPCRCONServiceServer(s grpc.ServiceRegistrar, srv GRPCRCONServiceServer) {
	s.RegisterService(&GRPCRCONService_ServiceDesc, srv)
}

func _GRPCRCONService_Servers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCRCONServiceServer).Servers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcrcon.GRPCRCONService/Servers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCRCONServiceServer).Servers(ctx, req.(*ServersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCRCONService_Restart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCRCONServiceServer).Restart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcrcon.GRPCRCONService/Restart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCRCONServiceServer).Restart(ctx, req.(*RestartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCRCONService_Command_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCRCONServiceServer).Command(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcrcon.GRPCRCONService/Command",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCRCONServiceServer).Command(ctx, req.(*CommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCRCONService_Announce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnnounceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCRCONServiceServer).Announce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcrcon.GRPCRCONService/Announce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCRCONServiceServer).Announce(ctx, req.(*AnnounceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCRCONService_Kick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KickRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCRCONServiceServer).Kick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcrcon.GRPCRCONService/Kick",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCRCONServiceServer).Kick(ctx, req.(*KickRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCRCONService_Lock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCRCONServiceServer).Lock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcrcon.GRPCRCONService/Lock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCRCONServiceServer).Lock(ctx, req.(*LockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCRCONService_Say_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCRCONServiceServer).Say(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcrcon.GRPCRCONService/Say",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCRCONServiceServer).Say(ctx, req.(*LockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCRCONService_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShutdownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCRCONServiceServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcrcon.GRPCRCONService/Shutdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCRCONServiceServer).Shutdown(ctx, req.(*ShutdownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCRCONService_Unlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCRCONServiceServer).Unlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcrcon.GRPCRCONService/Unlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCRCONServiceServer).Unlock(ctx, req.(*UnlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GRPCRCONService_ServiceDesc is the grpc.ServiceDesc for GRPCRCONService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GRPCRCONService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcrcon.GRPCRCONService",
	HandlerType: (*GRPCRCONServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Servers",
			Handler:    _GRPCRCONService_Servers_Handler,
		},
		{
			MethodName: "Restart",
			Handler:    _GRPCRCONService_Restart_Handler,
		},
		{
			MethodName: "Command",
			Handler:    _GRPCRCONService_Command_Handler,
		},
		{
			MethodName: "Announce",
			Handler:    _GRPCRCONService_Announce_Handler,
		},
		{
			MethodName: "Kick",
			Handler:    _GRPCRCONService_Kick_Handler,
		},
		{
			MethodName: "Lock",
			Handler:    _GRPCRCONService_Lock_Handler,
		},
		{
			MethodName: "Say",
			Handler:    _GRPCRCONService_Say_Handler,
		},
		{
			MethodName: "Shutdown",
			Handler:    _GRPCRCONService_Shutdown_Handler,
		},
		{
			MethodName: "Unlock",
			Handler:    _GRPCRCONService_Unlock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/proto/grpcrcon/grpcrcon.proto",
}
